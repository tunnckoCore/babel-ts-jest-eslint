{
  "/home/charlike/code/babel-ts-jest-eslint/src/add.ts": {
    "path": "/home/charlike/code/babel-ts-jest-eslint/src/add.ts",
    "contents": "export const plus = (a: number, b: number) => a + b;\n\n// some okxx\nexport const minus = (a: number, b: number) => a - b;\n",
    "contentHash": "6867b04b7d71033f20afede4085c6746be244da36146cafb960f285572024911",
    "stat": {
      "dev": 2055,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 5901758,
      "size": 121,
      "blocks": 8,
      "atimeMs": 1547275699160.6687,
      "mtimeMs": 1547275698900.6687,
      "ctimeMs": 1547275698900.6687,
      "birthtimeMs": 1547275698900.6687
    }
  },
  "/home/charlike/code/babel-ts-jest-eslint/src/bar.ts": {
    "path": "/home/charlike/code/babel-ts-jest-eslint/src/bar.ts",
    "contents": "// import fs from 'fs-extra';\n// import fastGlob from 'fast-glob';\n\n// // class GlobStateCache {\n// //   async load(stateFile) {\n// //     let state = null;\n// //     if (fs.existsSync(stateFile)) {\n// //       const rawState = await fs.readFile(stateFile);\n// //       state = JSON.parse(rawState);\n// //     } else {\n// //       await fs.writeFile(stateFile, '{}');\n// //       state = {};\n// //     }\n// //     this.state = state;\n// //   }\n\n// //   async monitor(patterns) {\n// //     await fastGlob(patterns, {\n// //       ignore: ['**/node_modules/**'],\n// //       transform: async (fp) => {\n// //         const file = { path: fp };\n\n// //         file.contents = fs.readFile(file.path, 'utf8');\n// //       },\n// //     });\n// //   }\n// // }\n\n// async function main() {\n//   await fastGlob('.', {\n//     ignore: ['**/node_modules/**'],\n//     transform: async (fp) => {\n//       const file = { path: fp, contents: await fs.readFile(fp, 'utf8') };\n//       console.log(file);\n//       return file;\n//     },\n//   });\n// }\n\n// main();\n",
    "contentHash": "868ea37a20ba643e184282055b2167551b570ad8fa1377a69b09f1138b0f15e6",
    "stat": {
      "dev": 2055,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 5901073,
      "size": 1041,
      "blocks": 8,
      "atimeMs": 1547267468650.5942,
      "mtimeMs": 1547267468360.5942,
      "ctimeMs": 1547267468360.5942,
      "birthtimeMs": 1547267468360.5942
    }
  },
  "/home/charlike/code/babel-ts-jest-eslint/src/glob-cache.js": {
    "path": "/home/charlike/code/babel-ts-jest-eslint/src/glob-cache.js",
    "contents": "import fs from 'fs-extra';\nimport crypto from 'crypto';\nimport fastGlob from 'fast-glob';\n\n/* eslint-disable class-methods-use-this */\n\nclass GlobStateCache {\n  constructor() {\n    this.loadedFiles = null;\n    this.changedFiles = {};\n  }\n\n  async loadCache(stateFile) {\n    this.stateFile = stateFile;\n\n    if (fs.existsSync(this.stateFile)) {\n      const rawState = await fs.readFile(this.stateFile, 'utf8');\n\n      this.loadedFiles = JSON.parse(rawState);\n    }\n\n    return this;\n  }\n\n  // allow passing option for maintaining clean state?\n  // now it can be called \"dirty\" because\n  // it never cleans up after, for example, (re)moving a file from the system\n  // the entry for this file stays, which is very aggresive but why not?\n  async monitor(patterns, options) {\n    const opts = Object.assign(\n      { ignore: ['**/{node_modules,coverage,dist}/**'] },\n      options,\n      { onlyFiles: true, absolute: true },\n    );\n\n    // compare(oldFileFromCache: object, newFile: object): boolean\n    let { shouldChange, onChange } = opts;\n    shouldChange = typeof shouldChange === 'function' ? shouldChange : () => {};\n    onChange = typeof onChange === 'function' ? onChange : () => {};\n\n    const filepaths = await fastGlob(patterns, opts);\n\n    /* eslint-disable no-restricted-syntax, no-await-in-loop */\n\n    if (!this.loadedFiles) {\n      for (const filepath of filepaths) {\n        const file = await this.createFile(filepath);\n        this.changedFiles[file.path] = file;\n      }\n\n      return this.changedFiles;\n    }\n\n    for (const filepath of filepaths) {\n      const loadedFile = this.loadedFiles[filepath];\n      const file = await this.createFile(filepath);\n\n      if (loadedFile) {\n        const differentSize = file.stat.size !== loadedFile.stat.size;\n        const differentContents = file.contentHash !== loadedFile.contentHash;\n        const modifiedTime = file.stat.mtimeMs !== loadedFile.stat.mtimeMs;\n        const isChanged = differentSize && differentContents && modifiedTime;\n\n        if (shouldChange(loadedFile, file) || isChanged) {\n          onChange(loadedFile, file);\n          this.changedFiles[file.path] = file;\n        }\n      } else {\n        this.changedFiles[file.path] = file;\n      }\n    }\n\n    return this.changedFiles;\n  }\n\n  async writeCache(changed) {\n    const state = Object.assign(\n      {},\n      this.loadedFiles,\n      this.changedFiles,\n      changed,\n    );\n\n    await fs.writeFile(this.stateFile, JSON.stringify(state, null, 2));\n  }\n\n  async createFile(file) {\n    const res = {};\n    let stat = null;\n\n    if (file && typeof file === 'object') {\n      stat = file.stat || (await fs.lstat(file.path));\n      res.path = file.path;\n      res.contents = file.contents || (await fs.readFile(file.path, 'utf8'));\n    } else {\n      stat = await fs.lstat(file);\n      res.path = file;\n      res.contents = await fs.readFile(file, 'utf8');\n    }\n\n    res.contentHash = crypto\n      .createHash('sha256')\n      .update(res.contents)\n      .digest('hex');\n\n    res.stat = Object.keys(stat).reduce((acc, key) => {\n      // all (including `atimeMs`, `mtimeMs` and `ctimeMs`)\n      // but except the Date objects like `atime`, `mtime` and `ctime`\n      if (!key.endsWith('time')) {\n        acc[key] = stat[key];\n      }\n      return acc;\n    }, {});\n\n    return res;\n  }\n}\n\nasync function main(patterns, options) {\n  const globState = new GlobStateCache();\n\n  await globState.loadCache('./file-cache.json');\n  await globState.monitor(patterns, options);\n  await globState.writeCache();\n\n  return globState;\n}\n\nlet i = 0;\nmain(['src/**/*.{js,ts,tsx}', '!src/**/*.test.{ts,tsx}'], {\n  onChange: (old, file) => {\n    i++;\n    console.log(i);\n  },\n});\n",
    "contentHash": "534abe7ee5a4290459f96043ddabff213499a881a193db17de0b4bfcabf2c4b5",
    "stat": {
      "dev": 2055,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 5901079,
      "size": 3690,
      "blocks": 8,
      "atimeMs": 1547275704040.6687,
      "mtimeMs": 1547275703730.6687,
      "ctimeMs": 1547275703730.6687,
      "birthtimeMs": 1547275703730.6687
    }
  },
  "/home/charlike/code/babel-ts-jest-eslint/src/hoho.js": {
    "path": "/home/charlike/code/babel-ts-jest-eslint/src/hoho.js",
    "contents": "const ok = 1111111111;\n",
    "contentHash": "51c57519ffb21b5791aaa72a2bf615438a94955e56761d69da176cd24e51ce5d",
    "stat": {
      "dev": 2055,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 5901085,
      "size": 23,
      "blocks": 8,
      "atimeMs": 1547270097850.618,
      "mtimeMs": 1547269790260.6152,
      "ctimeMs": 1547270093170.618,
      "birthtimeMs": 1547270093170.618
    }
  }
}